generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int          @id @default(autoincrement())
  name               String?
  email              String       @unique
  password           String
  role               String?
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  balance            Decimal      @default(0.000000000000000000000000000000)
  stars              Decimal      @default(0.000000000000000000000000000000)
  lastLoginTime      DateTime?    @db.DateTime(0)
  lastLoginIpAddress String?      @db.VarChar(50)
  listingCount       Int?
  dailyBonus         DailyBonus[]
  Post               Post[]
}

model DailyBonus {
  id     Int      @id @default(autoincrement())
  userId Int
  bonus  Int      @default(20)
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Post_authorId_fkey")
}

model Car {
  id                  Int        @id @default(autoincrement())
  userId              String?    @db.VarChar(50)
  brandId             Int?
  brandName           String?    @db.VarChar(50)
  modelId             Int?
  price               Int?
  modelName           String     @default("") @db.VarChar(50)
  description         String?    @db.VarChar(50)
  year                Int?
  mileage             Int?
  VIN                 String?    @db.VarChar(50)
  fuelType            String?    @db.VarChar(50)
  seatCount           Int?
  color               String?    @db.VarChar(50)
  gearbox             String?    @db.VarChar(50)
  isUrgent            Int?
  isWhatsappActive    Int?
  is_original_mileage Int?       @db.TinyInt
  createdAt           DateTime   @default(dbgenerated("(now())")) @db.Timestamp(0)
  updatedAt           DateTime?  @db.Timestamp(0)
  deletedAt           DateTime?  @db.Timestamp(0)
  country             String?    @db.VarChar(50)
  city                String?    @db.VarChar(50)
  engineDisplacement  Int?
  images            CarImage[]
}

model CarBrand {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  country     String?   @db.VarChar(255)
  logo        String?   @db.VarChar(255)
  established DateTime?
  rank        Int?
  isVisible   Int?      @default(dbgenerated("(true)")) @db.TinyInt
  count       Int?      @default(0)
}

model CarModel {
  id        Int     @id @default(autoincrement())
  name      String
  brandId   Int
  brandName String  @default("") @db.VarChar(50)
  years     String?
  isVisible String?
  count     Int     @default(0)
  groupName String? @db.VarChar(50)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Catalog {
  id          Int?
  title       String? @db.VarChar(50)
  brandId     Int?
  description Int?
  text        String? @db.Text
  modelId     String? @db.VarChar(50)

  @@ignore
}

model CarImage {
  id        Int       @id @default(autoincrement())
  carId     Int       @default(0)
  rank      Int?
  path      String?   @db.VarChar(250)
  storage   String?   @db.VarChar(50)
  createdAt DateTime? @default(dbgenerated("(now())")) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  Car       Car       @relation(fields: [carId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CarImage_Car")

  @@index([carId], map: "carId")
}
